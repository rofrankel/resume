{
  "name": "handlebars-wax",
  "version": "4.0.4",
  "description": "Effortless wiring of Handlebars data, partials, helpers, and decorators.",
  "main": "src/handlebars-wax.js",
  "scripts": {
    "coveralls": "nyc report -r text-lcov | coveralls",
    "pretest": "xo src/*.js test/*.js",
    "test": "nyc -r html -r text ava -v test/*.js",
    "watch": "watch 'npm test' src test -du --wait=5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/shannonmoeller/handlebars-wax.git"
  },
  "keywords": [
    "handlebars",
    "hbs",
    "hb",
    "glob",
    "globby",
    "register",
    "data",
    "partials",
    "helpers",
    "decorators"
  ],
  "author": {
    "name": "Shannon Moeller",
    "email": "me@shannonmoeller.com",
    "url": "http://shannonmoeller.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/shannonmoeller/handlebars-wax/issues"
  },
  "homepage": "https://github.com/shannonmoeller/handlebars-wax",
  "dependencies": {
    "object-assign": "^4.1.0",
    "require-glob": "^3.2.0"
  },
  "devDependencies": {
    "ava": "^0.16.0",
    "coveralls": "^2.11.14",
    "handlebars": "^4.0.5",
    "nyc": "^8.3.0",
    "watch": "^0.19.2",
    "xo": "^0.16.0"
  },
  "engines": {
    "node": ">= 0.12"
  },
  "xo": {
    "rules": {
      "brace-style": [
        2,
        "stroustrup"
      ],
      "eqeqeq": [
        2,
        "allow-null"
      ],
      "no-eq-null": 0,
      "object-curly-spacing": [
        2,
        "always"
      ],
      "operator-linebreak": [
        2,
        "before"
      ],
      "babel/object-curly-spacing": [
        2,
        "always"
      ]
    }
  },
  "readme": "# `handlebars-wax`\n\n[![NPM version][npm-img]][npm-url] [![Downloads][downloads-img]][npm-url] [![Build Status][travis-img]][travis-url] [![Coverage Status][coveralls-img]][coveralls-url] [![Chat][gitter-img]][gitter-url] [![Tip][amazon-img]][amazon-url]\n\nEffortless registration of [Handlebars][handlebars] data, partials, helpers, and decorators.\n\n## Install\n\n    $ npm install --save handlebars-wax\n\n## Usage\n\n```\n┣━ index.js\n┣━ data/\n┃  ┣━ site.js\n┃  ┗━ locale.json\n┣━ decorators/\n┃  ┣━ currency.js\n┃  ┗━ i18n.js\n┣━ helpers/\n┃  ┣━ link.js\n┃  ┗━ list.js\n┗━ partials/\n   ┣━ footer.js\n   ┗━ header.hbs\n```\n\n```js\nvar handlebars = require('handlebars');\nvar handlebarsWax = require('handlebars-wax');\n\nvar wax = handlebarsWax(handlebars)\n\n    // Partials\n    .partials('./partials/**/*.{hbs,js}')\n    .partials({\n        boo: '{{#each boo}}{{greet}}{{/each}}',\n        far: '{{#each far}}{{length}}{{/each}}'\n    })\n\n    // Helpers\n    .helpers(require('handlebars-layouts'))\n    .helpers('./helpers/**/*.js')\n    .helpers({\n        foo: function () { ... },\n        bar: function () { ... }\n    })\n\n    // Decorators\n    .decorators('./decorators/**/*.js')\n    .decorators({\n        baz: function () { ... },\n        qux: function () { ... }\n    })\n\n    // Data\n    .data('./data/**/*.{js,json}')\n    .data({\n        lorem: 'dolor',\n        ipsum: 'sit amet'\n    });\n\nconsole.log(handlebars.partials);\n// { footer: fn(), header: fn(), boo: fn(), far: fn() }\n\nconsole.log(handlebars.helpers);\n// { link: fn(), list: fn(), foo: fn(), bar: fn(), extend: fn(), ... }\n\nconsole.log(handlebars.decorators);\n// { currency: fn(), i18n: fn(), baz: fn(), bat: fn() }\n\nconsole.log(wax.context);\n// { site: { ... }, locale: { ... }, lorem: 'dolor', ipsum: 'sit amet' }\n\nvar template = wax.compile('{{lorem}} {{ipsum}}');\n\nconsole.log(template({ ipsum: 'consectetur' }));\n// \"dolor consectetur\"\n```\n\n## Registering Partials, Helpers, and Decorators\n\nYou may use `handlebars-wax` to require and register any modules that export a `register` factory, an object, or a function as partials, helpers, and decorators.\n\n### Exporting a Factory\n\nIn cases where a direct reference to the instance of Handlebars in use is needed, modules may export a `register` factory function. For example, the following module will define a new helper called `foo-bar`:\n\n```js\nmodule.exports.register = function (handlebars) {\n    handlebars.registerHelper('foo-bar', function (text, url) {\n        var result = '<a href=\"' + url + '\">' + text + '</a>';\n\n        return new handlebars.SafeString(result);\n    });\n};\n```\n\n### Exporting an Object\n\nIf a module exports an object, that object is registered with Handlebars directly where the object keys are used as names. For example, the following module exports an object that will cause `baz` and `qux` to be registered:\n\n```js\nmodule.exports = {\n    baz: function () {\n        // do something\n    },\n    qux: function () {\n        // do something\n    }\n};\n```\n\n### Exporting a Function\n\nIf a module exports a function, that function is registered based on the globbed portion of a path, ignoring extensions. Handlebars' `require.extensions` hook may be used to load `.handlebars` or `.hbs` files.\n\n```js\nmodule.exports = function () {\n    // do something\n};\n```\n\n```\n┣━ index.js\n┗━ partials/\n   ┣━ components\n   ┃  ┣━ link.js\n   ┃  ┗━ list.js\n   ┗━ layouts\n      ┣━ one-column.hbs\n      ┗━ two-column.hbs\n```\n\n```js\nhandlebarsWax(handlebars)\n    .partials('./partials/**/*.{hbs,js}');\n    // registers the partials:\n    // - `components/link`\n    // - `components/list`\n    // - `layouts/one-column`\n    // - `layouts/two-column`\n\nhandlebarsWax(handlebars)\n    .partials('./partials/components/*.js')\n    .partials('./partials/layouts/*.hbs');\n    // registers the partials:\n    // - `link`\n    // - `list`\n    // - `one-column`\n    // - `two-column`\n\nhandlebarsWax(handlebars)\n    .partials([\n        './partials/**/*.{hbs,js}',\n        '!./partials/layouts/**'\n    ])\n    .partials('./partials/layouts/*.hbs');\n    // registers the partials:\n    // - `components/link`\n    // - `components/list`\n    // - `one-column`\n    // - `two-column`\n```\n\nHelpers and decorators are handled similarly to partials, but path separators and non-word characters are replaced with hyphens to avoid having to use [segment-literal notation][square] inside templates.\n\n```\n┣━ index.js\n┗━ helpers/\n   ┣━ format\n   ┃  ┣━ date.js\n   ┃  ┗━ number.round.js\n   ┗━ list\n      ┣━ group-by.js\n      ┗━ order-by.js\n```\n\n```js\nhandlebarsWax(handlebars)\n    .helpers('./helpers/**/*.js');\n    // registers the helpers:\n    // - `format-date`\n    // - `format-number-round`\n    // - `list-group-by`\n    // - `list-order-by`\n```\n\nYou may customize how names are generated by using the `base` option, or by specifying a custom `parsePartialName`, `parseHelperName`, or `parseDecoratorName` function.\n\n\n```js\nhandlebarsWax(handlebars)\n    .partials('./partials/components/*.js', {\n        base: __dirname\n    })\n    .partials('./partials/layouts/*.hbs', {\n        base: path.join(__dirname, 'partials/layouts')\n    });\n    // registers the partials:\n    // - `partials/components/link`\n    // - `partials/components/list`\n    // - `one-column`\n    // - `two-column`\n\nhandlebarsWax(handlebars)\n    .helpers('./helpers/**/*.{hbs,js}', {\n        // Expect these helpers to export their own name.\n        parseHelperName: function(options, file) {\n            // options.handlebars\n            // file.cwd\n            // file.base\n            // file.path\n            // file.exports\n\n            return file.exports.name;\n        }\n    });\n    // registers the helpers:\n    // - `date`\n    // - `round`\n    // - `groupBy`\n    // - `orderBy`\n```\n\n## Registering Data\n\nWhen data is registered, the resulting object structure is determined according to the default rules of [`require-glob`][reqglob].\n\n```\n┣━ index.js\n┗━ data/\n   ┣━ foo/\n   ┃  ┣━ hello.js\n   ┃  ┗━ world.json\n   ┗━ bar/\n      ┣━ bye.js\n      ┗━ moon.json\n```\n\n```js\nhandlebarsWax(handlebars)\n    .data('./data/**/*.{js,json}');\n    // registers the data:\n    // {\n    //     foo: {\n    //         hello: require('./data/foo/hello.js'),\n    //         world: require('./data/foo/world.json')\n    //     },\n    //     bar: {\n    //         hello: require('./data/bar/bye.js'),\n    //         world: require('./data/bar/moon.json')\n    //     }\n    // }\n```\n\nYou may customize how data is structured by using the `base` option, or by specifying a custom `parseDataName`.\n\n```js\nhandlebarsWax(handlebars)\n    .data('./data/**/*.{js,json}', {\n        base: __dirname,\n        parseDataName: function(options, file) {\n            // options.handlebars\n            // file.cwd\n            // file.base\n            // file.path\n            // file.exports\n\n            return file.path\n                .replace(file.base, '')\n                .split(/[\\/\\.]/)\n                .filter(Boolean)\n                .reverse()\n                .join('_')\n                .toUpperCase();\n        }\n    });\n    // registers the data:\n    // {\n    //     JS_HELLO_FOO_DATA: require('./data/foo/hello.js'),\n    //     JSON_WORLD_FOO_DATA: require('./data/foo/world.json'),\n    //     JS_BYE_BAR_DATA: require('./data/bar/bye.js'),\n    //     JSON_MOON_BAR_DATA: require('./data/bar/moon.json')\n    // }\n```\n\n## Context and Rendering\n\nRegistered data is exposed to templates that are compiled by `handlebars-wax` as the [`@root`][root] context and as a [parent frame][frame] of data passed to the template function. You may compile strings, or recompile template functions.\n\n```js\nvar compiledTemplate = handlebars.compile('{{foo}} {{bar}}');\nvar waxedTemplate = wax.compile(compiledTemplate);\n// or: var waxedTemplate = wax.compile('{{foo}} {{bar}}');\n\nwax.data({ foo: 'hello', bar: 'world' });\n\nconsole.log(compiledTemplate());\n// \" \"\n\nconsole.log(waxedTemplate());\n// \"hello world\"\n\nconsole.log(waxedTemplate({ bar: 'moon' }));\n// \"hello moon\"\n\nvar accessTemplate = wax.compile('{{bar}} {{_parent.bar}} {{@root.bar}} {{@root._parent.bar}}');\n\nconsole.log(accessTemplate({ bar: 'moon' }, { data: { root: { bar: 'sun'} } }));\n// \"moon world sun world\"\n```\n\n## API\n\n### handlebarsWax(handlebars [, options]): HandlebarsWax\n\n- `handlebars` `{Handlebars}` An instance of Handlebars to wax.\n- `options` `{Object}` (optional) Passed directly to [`require-glob`][reqglob] so check there for more options.\n  - `bustCache` `{Boolean}` (default: `true`) Force reload data, partials, helpers, and decorators.\n  - `cwd` `{String}` (default: `process.cwd()`) Current working directory.\n  - `compileOptions` `{Object}` Default options to use when compiling templates.\n  - `templateOptions` `{Object}` Default options to use when rendering templates.\n  - `parsePartialName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n  - `parseHelperName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n  - `parseDecoratorName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n  - `parseDataName` `{Function(options, file): String}` See section on [registering data](#exporting-data).\n\nProvides a waxed API to augment an instance of Handlebars.\n\n### .handlebars\n\nThe instance of Handlebars in use.\n\n### .context\n\nAn object containing all [registered data](#data-pattern-options-handlebarswax).\n\n### .partials(pattern [, options]): HandlebarsWax\n\n- `pattern` `{String|Array.<String>|Object|Function(handlebars)}` One or more [`minimatch` glob patterns][minimatch] patterns, an object of partials, or a partial factory.\n- `options` `{Object}` Passed directly to [`require-glob`][reqglob] so check there for more options.\n  - `parsePartialName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n\nRequires and registers [partials][partials] en-masse from the file-system or an object. May be called more than once. If names collide, newest wins.\n\n### .helpers(pattern [, options]): HandlebarsWax\n\n- `pattern` `{String|Array.<String>|Object|Function(handlebars)}` One or more [`minimatch` glob patterns][minimatch] patterns, an object of helpers, or a helper factory.\n- `options` `{Object}` Passed directly to [`require-glob`][reqglob] so check there for more options.\n  - `parseHelperName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n\nRequires and registers [helpers][helpers] en-masse from the file-system or an object. May be called more than once. If names collide, newest wins.\n\n### .decorators(pattern [, options]): HandlebarsWax\n\n- `pattern` `{String|Array.<String>|Object|Function(handlebars)}` One or more [`minimatch` glob patterns][minimatch] patterns, an object of decorators, or a decorator factory.\n- `options` `{Object}` Passed directly to [`require-glob`][reqglob] so check there for more options.\n  - `parseDecoratorName` `{Function(options, file): String}` See section on [registering a function](#exporting-a-function).\n\nRequires and registers [decorators][decorators] en-masse from the file-system or an object. May be called more than once. If names collide, newest wins.\n\n### .data(pattern [, options]): HandlebarsWax\n\n- `pattern` `{String|Array.<String>|Object}` One or more [`minimatch` glob patterns][minimatch] patterns, or a data object.\n- `options` `{Object}` Passed directly to [`require-glob`][reqglob] so check there for more options.\n  - `parseDataName` `{Function(options, file): String}` See section on [registering data](#registering-data).\n\nRequires and registers data en-masse from the file-system or an object into the current context. May be called more than once. Results are shallow-merged into a single object. If keys collide, newest wins. See [Context and Rendering](#context-and-rendering).\n\n### .compile(template [, options]): Function(Object)\n\n- `template` `{String|Function(Object)}`\n- `options` `{Object}` See the [`Handlebars.compile` documentation][compile].\n\nCompiles a template that can be executed immediately to produce a final result. Data provided to the template function will be a [child frame][frame] of the current [context](#context). See [Context and Rendering](#context-and-rendering).\n\n[compile]: http://handlebarsjs.com/reference.html#base-compile\n[decorators]: https://github.com/wycats/handlebars.js/blob/master/docs/decorators-api.md\n[frame]: http://handlebarsjs.com/reference.html#base-createFrame\n[glob]: https://github.com/isaacs/node-glob#usage\n[handlebars]: https://github.com/wycats/handlebars.js#usage\n[helpers]: http://handlebarsjs.com/#helpers\n[keygen]: https://github.com/shannonmoeller/require-glob#keygen\n[minimatch]: https://github.com/isaacs/minimatch#usage\n[partials]: http://handlebarsjs.com/#partials\n[reqglob]: https://github.com/shannonmoeller/require-glob#usage\n[root]: http://handlebarsjs.com/reference.html#data-root\n[square]: http://handlebarsjs.com/expressions.html#basic-blocks\n\n## Contribute\n\nStandards for this project, including tests, code coverage, and semantics are enforced with a build tool. Pull requests must include passing tests with 100% code coverage and no linting errors.\n\n### Test\n\n    $ npm test\n\n----\n\n© Shannon Moeller <me@shannonmoeller.com> (shannonmoeller.com)\n\nLicensed under [MIT](http://shannonmoeller.com/mit.txt)\n\n[amazon-img]:    https://img.shields.io/badge/amazon-tip_jar-yellow.svg?style=flat-square\n[amazon-url]:    https://www.amazon.com/gp/registry/wishlist/1VQM9ID04YPC5?sort=universal-price\n[coveralls-img]: http://img.shields.io/coveralls/shannonmoeller/handlebars-wax/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/shannonmoeller/handlebars-wax\n[downloads-img]: http://img.shields.io/npm/dm/handlebars-wax.svg?style=flat-square\n[gitter-img]:    http://img.shields.io/badge/gitter-join_chat-1dce73.svg?style=flat-square\n[gitter-url]:    https://gitter.im/shannonmoeller/shannonmoeller\n[npm-img]:       http://img.shields.io/npm/v/handlebars-wax.svg?style=flat-square\n[npm-url]:       https://npmjs.org/package/handlebars-wax\n[travis-img]:    http://img.shields.io/travis/shannonmoeller/handlebars-wax.svg?style=flat-square\n[travis-url]:    https://travis-ci.org/shannonmoeller/handlebars-wax\n",
  "readmeFilename": "README.md",
  "_id": "handlebars-wax@4.0.4",
  "dist": {
    "shasum": "c9cb64b6263288566575519ebcab72a14b5f4f41"
  },
  "_from": "https://registry.npmjs.org/handlebars-wax/-/handlebars-wax-4.0.4.tgz",
  "_resolved": "https://registry.npmjs.org/handlebars-wax/-/handlebars-wax-4.0.4.tgz"
}
